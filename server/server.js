// server/server.js
import Fastify from 'fastify';
import 'dotenv/config';

import cors from '@fastify/cors';
import helmet from '@fastify/helmet';
import sensible from '@fastify/sensible';
import multipart from '@fastify/multipart';
import fastifyStatic from '@fastify/static';
import cookie from '@fastify/cookie';            // ‚Üê NEW
import jwtLib from 'jsonwebtoken';               // ‚Üê NEW

import path from 'path';
import { fileURLToPath } from 'url';

import postgres from 'postgres';
import { drizzle } from 'drizzle-orm/postgres-js';

import { getUploadsRootAbs } from './services/storage.js';
import clientsRoutes from './routes/clients.js';
import plRoutes from './routes/pl.js';
import consolidationsRoutes from './routes/consolidations.js';
import authRoutes from './routes/auth.js';       // ‚Üê NEW

// --- –≤—ã—á–∏—Å–ª–∏–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É (–¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏)
const __dirname = path.dirname(fileURLToPath(import.meta.url));

// --- –∫–æ–Ω—Ñ–∏–≥
const PORT = process.env.PORT ? Number(process.env.PORT) : 3000;
const HOST = process.env.HOST || '0.0.0.0';
const DATABASE_URL = process.env.DATABASE_URL;

// --- —Å—Ç–∞—Ä—Ç
async function start() {
  const app = Fastify({ logger: true });

  // –ë–î: postgres-js + drizzle –∏ –ø—Ä–æ–∫–∏–Ω–µ–º –≤ fastify instance
  const sql = postgres(DATABASE_URL, { prepare: true, idle_timeout: 20 });
  const db = drizzle(sql);
  app.decorate('drizzle', db);

  // –ü–ª–∞–≥–∏–Ω—ã
  await app.register(sensible);

  // –î–ª—è –º–æ–Ω–æ–ª–∏—Ç–∞ CORS –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –≤—ã–∫–ª—é—á–∏—Ç—å.
  // –ï—Å–ª–∏ –±—É–¥–µ—à—å –≤—ã–Ω–æ—Å–∏—Ç—å —Ñ—Ä–æ–Ω—Ç –Ω–∞ –¥—Ä—É–≥–æ–π –¥–æ–º–µ–Ω ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –∏ –Ω–∞—Å—Ç—Ä–æ–π origin:
  // await app.register(cors, { origin: true, credentials: true });

  // –ù–µ –ª–æ–º–∞–µ–º –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–æ–≤/—Å—Ç—Ä–∞–Ω–∏—Ü –≤ <iframe>
  await app.register(helmet, {
    contentSecurityPolicy: false,
    crossOriginResourcePolicy: { policy: 'cross-origin' },
    crossOriginEmbedderPolicy: false,
  });

  // multipart –±–µ–∑ attachFieldsToBody ‚Äî –Ω—É–∂–Ω—ã filename/mimetype
  await app.register(multipart, {
    limits: { fileSize: 50 * 1024 * 1024 }, // 50 MB
  });

  // Cookies (–¥–ª—è httpOnly JWT cookie)
  await app.register(cookie, {
    secret: process.env.JWT_SECRET || 'dev-secret',
  });

  // === JWT helpers & auth guard ===
  const JWT_SECRET = process.env.JWT_SECRET || 'dev-secret';
  const JWT_EXPIRES = process.env.JWT_EXPIRES || '30d';

  // user –Ω–∞ –∑–∞–ø—Ä–æ—Å
  app.decorateRequest('user', null);

  // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ cookie –∏ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å
  app.addHook('preHandler', async (req, _reply) => {
    const token = req.cookies?.token;
    if (!token) return;
    try {
      const payload = jwtLib.verify(token, JWT_SECRET);
      // payload: { id, login, name, role?, iat, exp }
      req.user = payload;
    } catch {
      // –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π/–ø—Ä–æ—Ç—É—Ö—à–∏–π —Ç–æ–∫–µ–Ω ‚Äî –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    }
  });

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–¥–∞—á–∏ JWT
  app.decorate('issueJwt', (user) => {
    // user: { id, login, name, role? }
    return jwtLib.sign(
      { id: user.id, login: user.login, name: user.name, role: user.role },
      JWT_SECRET,
      { expiresIn: JWT_EXPIRES }
    );
  });

  // Guard –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
  app.decorate('authGuard', async (req, reply) => {
    if (!req.user) return reply.unauthorized('Unauthorized');
  });

  // –†–∞–∑–¥–∞—á–∞ /uploads (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
  await app.register(fastifyStatic, {
    root: getUploadsRootAbs(),
    prefix: '/uploads/',
    decorateReply: false,
  });

  // –†–∞–∑–¥–∞—á–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞ (Vite -> dist) —Å –∫–æ—Ä–Ω—è
  const distRoot = path.resolve(__dirname, '../dist');
  await app.register(fastifyStatic, {
    root: distRoot,
    prefix: '/', // —Ñ—Ä–æ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Å –∫–æ—Ä–Ω—è
    decorateReply: false,
  });

  // Health / ping
  app.get('/ping', async () => ({ message: 'pong' }));
  app.get('/healthz', async () => ({ ok: true }));

  // –ú–∞—Ä—à—Ä—É—Ç—ã API (–≤–∞–∂–Ω–æ: –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç —Å —Ñ—Ä–æ–Ω—Ç–æ–º)
  await app.register(authRoutes, { prefix: '/api/auth' });                   // ‚Üê NEW: /api/auth/...
  await app.register(clientsRoutes, { prefix: '/api' });                     // /api/clients...
  await app.register(plRoutes, { prefix: '/api/pl' });                       // /api/pl/...
  await app.register(consolidationsRoutes, { prefix: '/api/consolidations' });// /api/consolidations/...

  // SPA fallback: –≤—Å—ë –Ω–µ-API –æ—Ç–¥–∞—ë–º index.html
  app.setNotFoundHandler((req, reply) => {
    if (req.raw.url.startsWith('/api')) return reply.notFound();
    return reply.sendFile('index.html'); // –∏–∑ distRoot
  });

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  app.setErrorHandler((error, request, reply) => {
    request.log.error(
      {
        tag: 'UNHANDLED_ERROR',
        route: request.url,
        method: request.method,
        params: request.params,
        body: request.body,
        query: request.query,
        code: error.code,
        message: error.message,
        detail: error.detail,
        cause: error.cause,
        stack: error.stack,
      },
      'üí• Unhandled server error',
    );

    reply.code(500).send({
      error: 'internal_server_error',
      message: error.message,
      code: error.code,
      detail: error.detail,
    });
  });

  // –ó–∞–ø—É—Å–∫
  try {
    await app.listen({ port: PORT, host: HOST });
    app.log.info(`‚úÖ Server on http://${HOST}:${PORT}`);
  } catch (err) {
    app.log.error(err);
    process.exit(1);
  }

  // Graceful shutdown
  const close = async () => {
    try {
      await app.close();
      await sql.end({ timeout: 5 });
      process.exit(0);
    } catch (e) {
      process.exit(1);
    }
  };
  process.on('SIGINT', close);
  process.on('SIGTERM', close);
}

start();